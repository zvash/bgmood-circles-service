// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zvash/bgmood-circles-service/internal/db (interfaces: DataStore)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/zvash/bgmood-circles-service/internal/db"
	repository "github.com/zvash/bgmood-circles-service/internal/db/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AcceptJoinRequestTransaction mocks base method.
func (m *MockDataStore) AcceptJoinRequestTransaction(arg0 context.Context, arg1 db.AcceptJoinRequestTransactionParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptJoinRequestTransaction", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptJoinRequestTransaction indicates an expected call of AcceptJoinRequestTransaction.
func (mr *MockDataStoreMockRecorder) AcceptJoinRequestTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptJoinRequestTransaction", reflect.TypeOf((*MockDataStore)(nil).AcceptJoinRequestTransaction), arg0, arg1)
}

// AddMemberToCircle mocks base method.
func (m *MockDataStore) AddMemberToCircle(arg0 context.Context, arg1 repository.AddMemberToCircleParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberToCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMemberToCircle indicates an expected call of AddMemberToCircle.
func (mr *MockDataStoreMockRecorder) AddMemberToCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberToCircle", reflect.TypeOf((*MockDataStore)(nil).AddMemberToCircle), arg0, arg1)
}

// AskForWPChangeByCircle mocks base method.
func (m *MockDataStore) AskForWPChangeByCircle(arg0 context.Context, arg1 repository.AskForWPChangeByCircleParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForWPChangeByCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForWPChangeByCircle indicates an expected call of AskForWPChangeByCircle.
func (mr *MockDataStoreMockRecorder) AskForWPChangeByCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForWPChangeByCircle", reflect.TypeOf((*MockDataStore)(nil).AskForWPChangeByCircle), arg0, arg1)
}

// CheckIfMemberCanChangeUsersAccess mocks base method.
func (m *MockDataStore) CheckIfMemberCanChangeUsersAccess(arg0 context.Context, arg1 repository.CheckIfMemberCanChangeUsersAccessParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfMemberCanChangeUsersAccess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfMemberCanChangeUsersAccess indicates an expected call of CheckIfMemberCanChangeUsersAccess.
func (mr *MockDataStoreMockRecorder) CheckIfMemberCanChangeUsersAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfMemberCanChangeUsersAccess", reflect.TypeOf((*MockDataStore)(nil).CheckIfMemberCanChangeUsersAccess), arg0, arg1)
}

// CheckIfMemberCanPostToCircle mocks base method.
func (m *MockDataStore) CheckIfMemberCanPostToCircle(arg0 context.Context, arg1 repository.CheckIfMemberCanPostToCircleParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfMemberCanPostToCircle", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfMemberCanPostToCircle indicates an expected call of CheckIfMemberCanPostToCircle.
func (mr *MockDataStoreMockRecorder) CheckIfMemberCanPostToCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfMemberCanPostToCircle", reflect.TypeOf((*MockDataStore)(nil).CheckIfMemberCanPostToCircle), arg0, arg1)
}

// CheckIfMemberExists mocks base method.
func (m *MockDataStore) CheckIfMemberExists(arg0 context.Context, arg1 repository.CheckIfMemberExistsParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfMemberExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfMemberExists indicates an expected call of CheckIfMemberExists.
func (mr *MockDataStoreMockRecorder) CheckIfMemberExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfMemberExists", reflect.TypeOf((*MockDataStore)(nil).CheckIfMemberExists), arg0, arg1)
}

// CreateCircle mocks base method.
func (m *MockDataStore) CreateCircle(arg0 context.Context, arg1 repository.CreateCircleParams) (repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCircle indicates an expected call of CreateCircle.
func (mr *MockDataStoreMockRecorder) CreateCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircle", reflect.TypeOf((*MockDataStore)(nil).CreateCircle), arg0, arg1)
}

// CreateCircleTransaction mocks base method.
func (m *MockDataStore) CreateCircleTransaction(arg0 context.Context, arg1 repository.CreateCircleParams) (repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircleTransaction", arg0, arg1)
	ret0, _ := ret[0].(repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCircleTransaction indicates an expected call of CreateCircleTransaction.
func (mr *MockDataStoreMockRecorder) CreateCircleTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircleTransaction", reflect.TypeOf((*MockDataStore)(nil).CreateCircleTransaction), arg0, arg1)
}

// CreateJoinRequest mocks base method.
func (m *MockDataStore) CreateJoinRequest(arg0 context.Context, arg1 repository.CreateJoinRequestParams) (repository.CircleJoinRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJoinRequest", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleJoinRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJoinRequest indicates an expected call of CreateJoinRequest.
func (mr *MockDataStoreMockRecorder) CreateJoinRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinRequest", reflect.TypeOf((*MockDataStore)(nil).CreateJoinRequest), arg0, arg1)
}

// CreateMood mocks base method.
func (m *MockDataStore) CreateMood(arg0 context.Context, arg1 repository.CreateMoodParams) (repository.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMood", arg0, arg1)
	ret0, _ := ret[0].(repository.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMood indicates an expected call of CreateMood.
func (mr *MockDataStoreMockRecorder) CreateMood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMood", reflect.TypeOf((*MockDataStore)(nil).CreateMood), arg0, arg1)
}

// CreateMoodTransaction mocks base method.
func (m *MockDataStore) CreateMoodTransaction(arg0 context.Context, arg1 db.CreateMoodTransactionParams) (repository.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoodTransaction", arg0, arg1)
	ret0, _ := ret[0].(repository.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMoodTransaction indicates an expected call of CreateMoodTransaction.
func (mr *MockDataStoreMockRecorder) CreateMoodTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoodTransaction", reflect.TypeOf((*MockDataStore)(nil).CreateMoodTransaction), arg0, arg1)
}

// DeleteCircle mocks base method.
func (m *MockDataStore) DeleteCircle(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircle indicates an expected call of DeleteCircle.
func (mr *MockDataStoreMockRecorder) DeleteCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircle", reflect.TypeOf((*MockDataStore)(nil).DeleteCircle), arg0, arg1)
}

// DenyWPChangeAccessToCircle mocks base method.
func (m *MockDataStore) DenyWPChangeAccessToCircle(arg0 context.Context, arg1 repository.DenyWPChangeAccessToCircleParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyWPChangeAccessToCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenyWPChangeAccessToCircle indicates an expected call of DenyWPChangeAccessToCircle.
func (mr *MockDataStoreMockRecorder) DenyWPChangeAccessToCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyWPChangeAccessToCircle", reflect.TypeOf((*MockDataStore)(nil).DenyWPChangeAccessToCircle), arg0, arg1)
}

// DisplayCircleForUser mocks base method.
func (m *MockDataStore) DisplayCircleForUser(arg0 context.Context, arg1 repository.DisplayCircleForUserParams) (repository.DisplayCircleForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCircleForUser", arg0, arg1)
	ret0, _ := ret[0].(repository.DisplayCircleForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCircleForUser indicates an expected call of DisplayCircleForUser.
func (mr *MockDataStoreMockRecorder) DisplayCircleForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCircleForUser", reflect.TypeOf((*MockDataStore)(nil).DisplayCircleForUser), arg0, arg1)
}

// ExploreCirclesForUserPaginated mocks base method.
func (m *MockDataStore) ExploreCirclesForUserPaginated(arg0 context.Context, arg1 repository.ExploreCirclesForUserPaginatedParams) ([]repository.ExploreCirclesForUserPaginatedRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExploreCirclesForUserPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.ExploreCirclesForUserPaginatedRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExploreCirclesForUserPaginated indicates an expected call of ExploreCirclesForUserPaginated.
func (mr *MockDataStoreMockRecorder) ExploreCirclesForUserPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExploreCirclesForUserPaginated", reflect.TypeOf((*MockDataStore)(nil).ExploreCirclesForUserPaginated), arg0, arg1)
}

// ExploreCirclesPaginated mocks base method.
func (m *MockDataStore) ExploreCirclesPaginated(arg0 context.Context, arg1 repository.ExploreCirclesPaginatedParams) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExploreCirclesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExploreCirclesPaginated indicates an expected call of ExploreCirclesPaginated.
func (mr *MockDataStoreMockRecorder) ExploreCirclesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExploreCirclesPaginated", reflect.TypeOf((*MockDataStore)(nil).ExploreCirclesPaginated), arg0, arg1)
}

// GetAvailableReactions mocks base method.
func (m *MockDataStore) GetAvailableReactions(arg0 context.Context) ([]repository.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableReactions", arg0)
	ret0, _ := ret[0].([]repository.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableReactions indicates an expected call of GetAvailableReactions.
func (mr *MockDataStoreMockRecorder) GetAvailableReactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableReactions", reflect.TypeOf((*MockDataStore)(nil).GetAvailableReactions), arg0)
}

// GetCircle mocks base method.
func (m *MockDataStore) GetCircle(arg0 context.Context, arg1 uuid.UUID) (repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircle indicates an expected call of GetCircle.
func (mr *MockDataStoreMockRecorder) GetCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircle", reflect.TypeOf((*MockDataStore)(nil).GetCircle), arg0, arg1)
}

// GetCircleMember mocks base method.
func (m *MockDataStore) GetCircleMember(arg0 context.Context, arg1 repository.GetCircleMemberParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleMember", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleMember indicates an expected call of GetCircleMember.
func (mr *MockDataStoreMockRecorder) GetCircleMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleMember", reflect.TypeOf((*MockDataStore)(nil).GetCircleMember), arg0, arg1)
}

// GetCircleMoods mocks base method.
func (m *MockDataStore) GetCircleMoods(arg0 context.Context, arg1 uuid.UUID) ([]repository.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleMoods", arg0, arg1)
	ret0, _ := ret[0].([]repository.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleMoods indicates an expected call of GetCircleMoods.
func (mr *MockDataStoreMockRecorder) GetCircleMoods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleMoods", reflect.TypeOf((*MockDataStore)(nil).GetCircleMoods), arg0, arg1)
}

// GetCircleMoodsPaginated mocks base method.
func (m *MockDataStore) GetCircleMoodsPaginated(arg0 context.Context, arg1 repository.GetCircleMoodsPaginatedParams) ([]repository.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleMoodsPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleMoodsPaginated indicates an expected call of GetCircleMoodsPaginated.
func (mr *MockDataStoreMockRecorder) GetCircleMoodsPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleMoodsPaginated", reflect.TypeOf((*MockDataStore)(nil).GetCircleMoodsPaginated), arg0, arg1)
}

// GetJoinRequest mocks base method.
func (m *MockDataStore) GetJoinRequest(arg0 context.Context, arg1 int64) (repository.CircleJoinRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJoinRequest", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleJoinRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJoinRequest indicates an expected call of GetJoinRequest.
func (mr *MockDataStoreMockRecorder) GetJoinRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJoinRequest", reflect.TypeOf((*MockDataStore)(nil).GetJoinRequest), arg0, arg1)
}

// GetMemberCount mocks base method.
func (m *MockDataStore) GetMemberCount(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberCount indicates an expected call of GetMemberCount.
func (mr *MockDataStoreMockRecorder) GetMemberCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberCount", reflect.TypeOf((*MockDataStore)(nil).GetMemberCount), arg0, arg1)
}

// GetMood mocks base method.
func (m *MockDataStore) GetMood(arg0 context.Context, arg1 uuid.UUID) (repository.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMood", arg0, arg1)
	ret0, _ := ret[0].(repository.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMood indicates an expected call of GetMood.
func (mr *MockDataStoreMockRecorder) GetMood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMood", reflect.TypeOf((*MockDataStore)(nil).GetMood), arg0, arg1)
}

// GetMoodCount mocks base method.
func (m *MockDataStore) GetMoodCount(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodCount indicates an expected call of GetMoodCount.
func (mr *MockDataStoreMockRecorder) GetMoodCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodCount", reflect.TypeOf((*MockDataStore)(nil).GetMoodCount), arg0, arg1)
}

// GetMoodReactions mocks base method.
func (m *MockDataStore) GetMoodReactions(arg0 context.Context, arg1 uuid.UUID) ([]repository.GetMoodReactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodReactions", arg0, arg1)
	ret0, _ := ret[0].([]repository.GetMoodReactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodReactions indicates an expected call of GetMoodReactions.
func (mr *MockDataStoreMockRecorder) GetMoodReactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodReactions", reflect.TypeOf((*MockDataStore)(nil).GetMoodReactions), arg0, arg1)
}

// GetUserCircle mocks base method.
func (m *MockDataStore) GetUserCircle(arg0 context.Context, arg1 repository.GetUserCircleParams) (repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCircle indicates an expected call of GetUserCircle.
func (mr *MockDataStoreMockRecorder) GetUserCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCircle", reflect.TypeOf((*MockDataStore)(nil).GetUserCircle), arg0, arg1)
}

// GetUserMoodReaction mocks base method.
func (m *MockDataStore) GetUserMoodReaction(arg0 context.Context, arg1 repository.GetUserMoodReactionParams) (repository.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMoodReaction", arg0, arg1)
	ret0, _ := ret[0].(repository.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMoodReaction indicates an expected call of GetUserMoodReaction.
func (mr *MockDataStoreMockRecorder) GetUserMoodReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMoodReaction", reflect.TypeOf((*MockDataStore)(nil).GetUserMoodReaction), arg0, arg1)
}

// GrantWPChangeAccessToCircle mocks base method.
func (m *MockDataStore) GrantWPChangeAccessToCircle(arg0 context.Context, arg1 repository.GrantWPChangeAccessToCircleParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantWPChangeAccessToCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantWPChangeAccessToCircle indicates an expected call of GrantWPChangeAccessToCircle.
func (mr *MockDataStoreMockRecorder) GrantWPChangeAccessToCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantWPChangeAccessToCircle", reflect.TypeOf((*MockDataStore)(nil).GrantWPChangeAccessToCircle), arg0, arg1)
}

// InviteToCircle mocks base method.
func (m *MockDataStore) InviteToCircle(arg0 context.Context, arg1 repository.InviteToCircleParams) (repository.CircleInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteToCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteToCircle indicates an expected call of InviteToCircle.
func (mr *MockDataStoreMockRecorder) InviteToCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToCircle", reflect.TypeOf((*MockDataStore)(nil).InviteToCircle), arg0, arg1)
}

// InviteToCircleTransaction mocks base method.
func (m *MockDataStore) InviteToCircleTransaction(arg0 context.Context, arg1 db.InviteToCircleTransactionParams) (repository.CircleInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteToCircleTransaction", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteToCircleTransaction indicates an expected call of InviteToCircleTransaction.
func (mr *MockDataStoreMockRecorder) InviteToCircleTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToCircleTransaction", reflect.TypeOf((*MockDataStore)(nil).InviteToCircleTransaction), arg0, arg1)
}

// KickFromCircle mocks base method.
func (m *MockDataStore) KickFromCircle(arg0 context.Context, arg1 repository.KickFromCircleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickFromCircle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickFromCircle indicates an expected call of KickFromCircle.
func (mr *MockDataStoreMockRecorder) KickFromCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickFromCircle", reflect.TypeOf((*MockDataStore)(nil).KickFromCircle), arg0, arg1)
}

// LeaveCircle mocks base method.
func (m *MockDataStore) LeaveCircle(arg0 context.Context, arg1 repository.LeaveCircleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCircle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveCircle indicates an expected call of LeaveCircle.
func (mr *MockDataStoreMockRecorder) LeaveCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCircle", reflect.TypeOf((*MockDataStore)(nil).LeaveCircle), arg0, arg1)
}

// ListInvitations mocks base method.
func (m *MockDataStore) ListInvitations(arg0 context.Context, arg1 uuid.UUID) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockDataStoreMockRecorder) ListInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockDataStore)(nil).ListInvitations), arg0, arg1)
}

// ListJoinedCircles mocks base method.
func (m *MockDataStore) ListJoinedCircles(arg0 context.Context, arg1 uuid.UUID) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJoinedCircles", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJoinedCircles indicates an expected call of ListJoinedCircles.
func (mr *MockDataStoreMockRecorder) ListJoinedCircles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJoinedCircles", reflect.TypeOf((*MockDataStore)(nil).ListJoinedCircles), arg0, arg1)
}

// ListJoinedCirclesPaginated mocks base method.
func (m *MockDataStore) ListJoinedCirclesPaginated(arg0 context.Context, arg1 repository.ListJoinedCirclesPaginatedParams) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJoinedCirclesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJoinedCirclesPaginated indicates an expected call of ListJoinedCirclesPaginated.
func (mr *MockDataStoreMockRecorder) ListJoinedCirclesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJoinedCirclesPaginated", reflect.TypeOf((*MockDataStore)(nil).ListJoinedCirclesPaginated), arg0, arg1)
}

// ListRequestedCircles mocks base method.
func (m *MockDataStore) ListRequestedCircles(arg0 context.Context, arg1 uuid.UUID) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequestedCircles", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestedCircles indicates an expected call of ListRequestedCircles.
func (mr *MockDataStoreMockRecorder) ListRequestedCircles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestedCircles", reflect.TypeOf((*MockDataStore)(nil).ListRequestedCircles), arg0, arg1)
}

// ListRequestedCirclesPaginated mocks base method.
func (m *MockDataStore) ListRequestedCirclesPaginated(arg0 context.Context, arg1 repository.ListRequestedCirclesPaginatedParams) ([]repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequestedCirclesPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestedCirclesPaginated indicates an expected call of ListRequestedCirclesPaginated.
func (mr *MockDataStoreMockRecorder) ListRequestedCirclesPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestedCirclesPaginated", reflect.TypeOf((*MockDataStore)(nil).ListRequestedCirclesPaginated), arg0, arg1)
}

// ReactToMood mocks base method.
func (m *MockDataStore) ReactToMood(arg0 context.Context, arg1 repository.ReactToMoodParams) (repository.MoodReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactToMood", arg0, arg1)
	ret0, _ := ret[0].(repository.MoodReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReactToMood indicates an expected call of ReactToMood.
func (mr *MockDataStoreMockRecorder) ReactToMood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactToMood", reflect.TypeOf((*MockDataStore)(nil).ReactToMood), arg0, arg1)
}

// RemoveAllCircleMembers mocks base method.
func (m *MockDataStore) RemoveAllCircleMembers(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllCircleMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllCircleMembers indicates an expected call of RemoveAllCircleMembers.
func (mr *MockDataStoreMockRecorder) RemoveAllCircleMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllCircleMembers", reflect.TypeOf((*MockDataStore)(nil).RemoveAllCircleMembers), arg0, arg1)
}

// RemoveAllCircleTags mocks base method.
func (m *MockDataStore) RemoveAllCircleTags(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllCircleTags", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllCircleTags indicates an expected call of RemoveAllCircleTags.
func (mr *MockDataStoreMockRecorder) RemoveAllCircleTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllCircleTags", reflect.TypeOf((*MockDataStore)(nil).RemoveAllCircleTags), arg0, arg1)
}

// RemoveAllInvitations mocks base method.
func (m *MockDataStore) RemoveAllInvitations(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllInvitations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllInvitations indicates an expected call of RemoveAllInvitations.
func (mr *MockDataStoreMockRecorder) RemoveAllInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllInvitations", reflect.TypeOf((*MockDataStore)(nil).RemoveAllInvitations), arg0, arg1)
}

// RemoveAllJoinRequests mocks base method.
func (m *MockDataStore) RemoveAllJoinRequests(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllJoinRequests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllJoinRequests indicates an expected call of RemoveAllJoinRequests.
func (mr *MockDataStoreMockRecorder) RemoveAllJoinRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllJoinRequests", reflect.TypeOf((*MockDataStore)(nil).RemoveAllJoinRequests), arg0, arg1)
}

// RemoveCircleTransaction mocks base method.
func (m *MockDataStore) RemoveCircleTransaction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCircleTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCircleTransaction indicates an expected call of RemoveCircleTransaction.
func (mr *MockDataStoreMockRecorder) RemoveCircleTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCircleTransaction", reflect.TypeOf((*MockDataStore)(nil).RemoveCircleTransaction), arg0, arg1)
}

// RemoveInvitation mocks base method.
func (m *MockDataStore) RemoveInvitation(arg0 context.Context, arg1 repository.RemoveInvitationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInvitation indicates an expected call of RemoveInvitation.
func (mr *MockDataStoreMockRecorder) RemoveInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInvitation", reflect.TypeOf((*MockDataStore)(nil).RemoveInvitation), arg0, arg1)
}

// RemoveJoinRequest mocks base method.
func (m *MockDataStore) RemoveJoinRequest(arg0 context.Context, arg1 repository.RemoveJoinRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJoinRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJoinRequest indicates an expected call of RemoveJoinRequest.
func (mr *MockDataStoreMockRecorder) RemoveJoinRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJoinRequest", reflect.TypeOf((*MockDataStore)(nil).RemoveJoinRequest), arg0, arg1)
}

// RemoveReactToMood mocks base method.
func (m *MockDataStore) RemoveReactToMood(arg0 context.Context, arg1 repository.RemoveReactToMoodParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReactToMood", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReactToMood indicates an expected call of RemoveReactToMood.
func (mr *MockDataStoreMockRecorder) RemoveReactToMood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReactToMood", reflect.TypeOf((*MockDataStore)(nil).RemoveReactToMood), arg0, arg1)
}

// SetCircleAccessToAdmin mocks base method.
func (m *MockDataStore) SetCircleAccessToAdmin(arg0 context.Context, arg1 repository.SetCircleAccessToAdminParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleAccessToAdmin", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleAccessToAdmin indicates an expected call of SetCircleAccessToAdmin.
func (mr *MockDataStoreMockRecorder) SetCircleAccessToAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleAccessToAdmin", reflect.TypeOf((*MockDataStore)(nil).SetCircleAccessToAdmin), arg0, arg1)
}

// SetCircleAccessToOwner mocks base method.
func (m *MockDataStore) SetCircleAccessToOwner(arg0 context.Context, arg1 repository.SetCircleAccessToOwnerParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleAccessToOwner", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleAccessToOwner indicates an expected call of SetCircleAccessToOwner.
func (mr *MockDataStoreMockRecorder) SetCircleAccessToOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleAccessToOwner", reflect.TypeOf((*MockDataStore)(nil).SetCircleAccessToOwner), arg0, arg1)
}

// SetCircleAccessToPoster mocks base method.
func (m *MockDataStore) SetCircleAccessToPoster(arg0 context.Context, arg1 repository.SetCircleAccessToPosterParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleAccessToPoster", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleAccessToPoster indicates an expected call of SetCircleAccessToPoster.
func (mr *MockDataStoreMockRecorder) SetCircleAccessToPoster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleAccessToPoster", reflect.TypeOf((*MockDataStore)(nil).SetCircleAccessToPoster), arg0, arg1)
}

// SetCircleAccessToViewer mocks base method.
func (m *MockDataStore) SetCircleAccessToViewer(arg0 context.Context, arg1 repository.SetCircleAccessToViewerParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleAccessToViewer", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleAccessToViewer indicates an expected call of SetCircleAccessToViewer.
func (mr *MockDataStoreMockRecorder) SetCircleAccessToViewer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleAccessToViewer", reflect.TypeOf((*MockDataStore)(nil).SetCircleAccessToViewer), arg0, arg1)
}

// SetCircleMemberAccess mocks base method.
func (m *MockDataStore) SetCircleMemberAccess(arg0 context.Context, arg1 repository.SetCircleMemberAccessParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleMemberAccess", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleMemberAccess indicates an expected call of SetCircleMemberAccess.
func (mr *MockDataStoreMockRecorder) SetCircleMemberAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleMemberAccess", reflect.TypeOf((*MockDataStore)(nil).SetCircleMemberAccess), arg0, arg1)
}

// SetCircleOwner mocks base method.
func (m *MockDataStore) SetCircleOwner(arg0 context.Context, arg1 repository.SetCircleOwnerParams) (repository.CircleMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircleOwner", arg0, arg1)
	ret0, _ := ret[0].(repository.CircleMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCircleOwner indicates an expected call of SetCircleOwner.
func (mr *MockDataStoreMockRecorder) SetCircleOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircleOwner", reflect.TypeOf((*MockDataStore)(nil).SetCircleOwner), arg0, arg1)
}

// UpdateCircle mocks base method.
func (m *MockDataStore) UpdateCircle(arg0 context.Context, arg1 repository.UpdateCircleParams) (repository.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircle", arg0, arg1)
	ret0, _ := ret[0].(repository.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCircle indicates an expected call of UpdateCircle.
func (mr *MockDataStoreMockRecorder) UpdateCircle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircle", reflect.TypeOf((*MockDataStore)(nil).UpdateCircle), arg0, arg1)
}
